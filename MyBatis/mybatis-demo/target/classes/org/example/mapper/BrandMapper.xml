<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    namespace:名称空间
-->

<mapper namespace="org.example.mapper.BrandMapper">

<!--
    数据库的字段名 和 实体类属性名称不一样，则不能自动封装数据
        *起别名：对不一样的列名起别名，让别名和实体类的属性名一样
            *缺点：每次查询都要定义一次别名
                *sql片段
                    *缺点：不灵活
    *resultMap：
       1.定义<resultMap>标签
       2.在<select>标签中，使用resultMap属性替换 resultType属性
-->
<!--
         id : 唯一标识
        type ：映射的类型 支持别名
-->
    <resultMap id="brandResultMap" type="Brand">
           <!-- id：完成主键的映射
                column ：表的列名
                property ：实体类的属性名
            result ：完成一般字段的映射
                column ：表的列名
                property ：实体类的属性名-->
        <id property="id" column="id"/>
        <result column="brand_name" property="brand_name" />
        <result column="company_name" property="company_name" />
        <result column="ordered" property="ordered"/>
        <result property="description" column="description"/>
        <result property="status" column="status"/>
        </resultMap>

    <select id="selectAll" resultMap="brandResultMap">
        select * from tb_brand ;
    </select>

<!-- SQL片段    -->
<!--    <sql id="brand_column">
        id, brand_name as brandname, company_name as companyname,ordered,description,status
    </sql>
    <select id="selectAll" resultType="Brand">
        select
            <include refid="brand_column"></include>
            from tb_brand ;
    </select>
-->
  <!--  <select id="selectAll" resultType="Brand">
        select id, brand_name as brandName, company_name as companyName,ordered,description,status from tb_brand ;
    </select>-->

    <!--
    *参数占位符
        1.#{} :会将其替换为? 为了防止SQL注入
        2.${} ：拼sql，会存在SQL注入问题
        3.使用时机
               *参数传递的时候：#{}
               *表名或者列名不固定的情况下：${} 会存在SQL注入问题
    *参数类型：parameterType :可以省略
    *特殊字符处理
        1.转义字符：
        2.CDATA区：<![CDATA[内容]]>
    -->
    <!--<select id="selectById" resultType="Brand">
        select * from tb_brand where id = #{id};
    </select>-->

    <select id="selectById" resultType="Brand">
        select id, brand_name as brandName, company_name as companyName,ordered,description,status from tb_brand where id = #{id};
    </select>

    <!--<select id="selectById" resultMap="brandResultMap">
        select *
        from tb_brand
        where id
         <![CDATA[
                  <
         ]]>
         #{id};

    </select>-->

<!--  条件查询  -->
    <select id="selectByCondition"  resultMap="brandResultMap">
        select
            id, brand_name , company_name ,ordered,description,status
        from
            tb_brand
        where status = #{status}
            and brand_name like concat('%',#{brandName},'%')
            and company_name like concat('%',#{companyName},'%')
    </select>

    <!--
          and brand_name like concat('%',#{brandName},'%')
          and company_name like concat('%',#{companyName},'%')
          select id, brand_name as brandName, company_name as companyName,ordered,description,status from tb_brand
          where status = 1 and brand_name = "华为" and company_name = "华为技术有限公司";
        动态条件查询
            * if: 条件判断
                * test：逻辑表达式
            * 问题：
                * 恒等式
                * <where> 替换 where 关键字
    -->
 <!--   <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        /* where 1 = 1*/
        <where>
            <if test="status != null">
                and status = #{status}
            </if>
            <if test="brand_name != null and brand_name != '' ">
                and brand_name like concat('%',#{brand_name},'%')
            </if>
            <if test="company_name != null and company_name != '' ">
                and company_name like concat('%',#{company_name},'%')
            </if>
        </where>
    </select>-->

<!--    <select id="selectByConditionSingle" resultMap="brandResultMap">
        select *
        from tb_brand
        where
        <choose>&lt;!&ndash;相当于switch&ndash;&gt;
            <when test="status != null">&lt;!&ndash;相当于case&ndash;&gt;
                status = #{status}
            </when>
            <when test="brand_name != null and brand_name != ''">&lt;!&ndash;相当于case&ndash;&gt;
                brand_name like #{brand_name}
            </when>
            <when test="company_name != null and company_name != '' ">&lt;!&ndash;相当于case&ndash;&gt;
                company_name like #{company_name}
            </when>
            <otherwise>
                1 = 1
            </otherwise>
        </choose>
    </select>-->

    <select id="selectByConditionSingle" resultMap="brandResultMap">
    select *
    from tb_brand
    <where>
        <choose><!--相当于switch-->
            <when test="status != null"><!--相当于case-->
                status = #{status}
            </when>
            <when test="brand_name != null and brand_name != ''"><!--相当于case-->
                brand_name like #{brand_name}
            </when>
            <when test="company_name != null and company_name != '' "><!--相当于case-->
                company_name like #{company_name}
            </when>
        </choose>
    </where>
</select>

    <insert id="add">
        insert into tb_brand (brand_name , company_name ,ordered,description,status)
        values (#{brand_name},#{company_name},#{ordered},#{description},#{status});
    </insert>

<!-- 主键返回   -->
    <!--<insert id="add" useGeneratedKeys="true" keyProperty="id">
        insert into tb_brand (brand_name , company_name ,ordered,description,status)
        values (#{brand_name},#{company_name},#{ordered},#{description},#{status});
    </insert>-->

    <update id="update">
        update tb_brand
        set
            brand_name = #{brand_name},
            company_name = #{company_name},
            ordered = #{ordered},
            description = #{description},
            status = #{status}
        where id = #{id};
    </update>

<!-- 动态修改   -->
    <update id="update2">
        update tb_brand
        <set>
            <if test="company_name != null and company_name != '' ">
                and company_name like concat('%',#{company_name},'%')
            </if>
            <if test="company_name != null and company_name != '' ">
                and company_name like concat('%',#{company_name},'%')
            </if>
            <if test="ordered != null">
                and ordered like concat('%',#{ordered},'%')
            </if>
            <if test="description != null and description != '' ">
                and description like concat('%',#{description},'%')
            </if>
            <if test="company_name != null">
                and status like concat('%',#{status},'%')
            </if>
        </set>
        where id = #{id};
    </update>

<!--  当个删除  -->
    <delete id="delByIdAfter">
        delete from tb_brand where id = #{id};
    </delete>

    <!--  批量删除  -->
    <!--<delete id="deleteByIdAfters">
        delete from tb_brand where id
        in (
            <foreach collection="ids" item="id" separator=",">
                #{id}
            </foreach>
             );
    </delete>-->

    <!--
           mybatis会将数组参数，封装为一个Map集合。
               * 默认：array = 数组
               * 使用@Param注解改变map集合的默认key的名称
       -->

    <delete id="deleteByIdAfters">
        delete from tb_brand where id
        in
        <foreach collection="array" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
        ;
    </delete>
</mapper>